name: "Stage"

on:
  push:
    branches: ["stage"]

env:
  IS_CICD: "true"
  ENVIRONMENT: "stage"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit_tests:
    name: "Unit tests"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: server/requirements.txt

      - name: Install server libraries
        run: pip install -r server/requirements.txt

      - name: Run server unit tests
        working-directory: server
        run: pytest tests/unit

  deploy_infrastructure:
    name: "Deploy infrastructure"
    needs: [unit_tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialise terraform state (foundation)
        working-directory: server/terraform/foundation
        run: terraform init -backend-config "key=website_watcher_js/${{env.ENVIRONMENT}}/foundation/terraform.tfstate"

      - name: Apply terraform state (foundation)
        working-directory: server/terraform/foundation
        run: terraform apply -auto-approve -var="environment=${{env.ENVIRONMENT}}"

      - name: Initialise terraform state (infrastructure)
        working-directory: server/terraform/infrastructure
        run: terraform init -backend-config "key=website_watcher_js/${{env.ENVIRONMENT}}/infrastructure/terraform.tfstate"

      - name: Apply terraform state (infrastructure)
        working-directory: server/terraform/infrastructure
        run: terraform apply -auto-approve -var="environment=${{env.ENVIRONMENT}}"

  build_website:
    name: "Build website"

    needs: [deploy_infrastructure]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: "client/package-lock.json"

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: Install NodeJS libraries
        working-directory: client
        run: npm ci

      - name: Build website
        working-directory: client
        run: npm run build

      - name: Initialise terraform state
        working-directory: client/terraform/website_deploy
        run: terraform init -backend-config "key=website_watcher_js/${{env.ENVIRONMENT}}/website_deploy/terraform.tfstate"

      - name: Apply terraform state
        working-directory: client/terraform/website_deploy
        run: terraform apply -auto-approve -var="environment=${{env.ENVIRONMENT}}"

  api_tests:
    name: "API Tests"
    needs: [deploy_infrastructure]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: server/requirements.txt

      - name: Install server libraries
        run: pip install -r server/requirements.txt

      - name: Run server api tests
        working-directory: server
        run: pytest tests/api

  browser_tests:
    name: "Browser tests"
    runs-on: ubuntu-latest
    needs: [build_website, api_tests]
    timeout-minutes: 10
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: "client/package-lock.json"

      - name: Install NodeJS libraries
        working-directory: client
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        working-directory: client
        run: npx playwright test

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: client/tests/browser/reports/
          retention-days: 30
