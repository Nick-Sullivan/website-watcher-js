name: "Stage deployment"

on:
  push:
    branches: ["master"]
  pull_request:

permissions:
  contents: read

jobs:
  unit_tests:
    name: "Unit tests"
    runs-on: ubuntu-latest
    environment: stage
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: server/requirements.txt

      - name: Install server libraries
        run: pip install -r server/requirements.txt

      - name: Run server unit tests
        run: pytest server/tests/unit

  deploy_infrastructure:
    name: "Deploy infrastructure"
    needs: [unit_tests]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialise terraform state (foundation)
        working-directory: terraform/foundation
        run: terraform init -backend-config "key=website_watcher_js/stage/foundation/terraform.tfstate"

      - name: Apply terraform state (foundation)
        working-directory: terraform/foundation
        run: terraform apply -auto-approve -var="environment=stage"

      - name: Initialise terraform state (infrastructure)
        working-directory: terraform/infrastructure
        run: terraform init -backend-config "key=website_watcher_js/stage/infrastructure/terraform.tfstate"

      - name: Apply terraform state (infrastructure)
        working-directory: terraform/infrastructure
        run: terraform apply -auto-approve -var="environment=stage"

  build_website:
    name: "Build website"
    needs: [deploy_infrastructure]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/website_deploy
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: "client/package-lock.json"

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2

      #   - name: Install NodeJS libraries
      #     working-directory: client
      #     run: npm install

      - name: Build website
        working-directory: client
        run: npm run build

      - name: Initialise terraform state
        run: terraform init -backend-config "key=website_watcher_js/stage/website_deploy/terraform.tfstate"

      - name: Apply terraform state
        run: terraform apply -auto-approve -var="environment=stage"

  api_tests:
    name: "API Tests"
    needs: [deploy_infrastructure]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: server/requirements.txt

      - name: Install server libraries
        run: pip install -r server/requirements.txt

      - name: Run server api tests
        run: pytest server/tests/api
